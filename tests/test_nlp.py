import pytest
import numpy as np
from openrecall.nlp import cosine_similarity, get_embedding

def test_cosine_similarity_identical_vectors():
    a = np.array([1, 0, 0])
    b = np.array([1, 0, 0])
    assert cosine_similarity(a, b) == 1.0

def test_cosine_similarity_orthogonal_vectors():
    a = np.array([1, 0, 0])
    b = np.array([0, 1, 0])
    assert cosine_similarity(a, b) == 0.0

def test_cosine_similarity_opposite_vectors():
    a = np.array([1, 0, 0])
    b = np.array([-1, 0, 0])
    assert cosine_similarity(a, b) == -1.0

def test_cosine_similarity_non_unit_vectors():
    a = np.array([3, 0, 0])
    b = np.array([1, 0, 0])
    assert cosine_similarity(a, b) == 1.0

def test_cosine_similarity_arbitrary_vectors():
    a = np.array([1, 2, 3])
    b = np.array([4, 5, 6])
    expected_similarity = np.dot(a, b) / (np.linalg.norm(a) * np.linalg.norm(b))
    assert cosine_similarity(a, b) == pytest.approx(expected_similarity)

# Test expects N/A after divison by zero, filter warning
@pytest.mark.filterwarnings("ignore:invalid value encountered")
def test_cosine_similarity_zero_vector():
    a = np.array([0, 0, 0])
    b = np.array([1, 0, 0])
    result = cosine_similarity(a, b)
    assert np.isnan(result), "Expected result to be NaN when one of the vectors is a zero vector"

def test_get_embedding():
    test_element_constant=[-3.17300810e-03,  7.47961402e-02, -1.27589814e-02,  5.78712188e-02,
       -1.68874599e-02, -3.44670471e-03,  1.25804901e-01,  9.18373931e-03,
       -5.15340455e-02,  2.72964220e-03,  7.28009567e-02, -1.05825119e-01,
       -1.50057180e-02, -3.50208096e-02,  5.06780995e-03, -1.20826121e-02,
       -6.24008197e-03,  2.36168224e-02, -4.75097224e-02,  2.11661980e-02,
        2.88862605e-02, -2.57196669e-02,  3.65504622e-02,  3.28414664e-02,
       -6.81853911e-04,  1.15374647e-01,  1.86415073e-02,  2.82638986e-02,
        6.47614151e-02, -1.17230326e-01,  3.69303301e-02,  3.13002407e-03,
        3.27178352e-02,  2.67634187e-02,  9.82184429e-03, -4.41041365e-02,
       -3.85202281e-02, -1.33589460e-02,  3.00087896e-03,  1.37298936e-02,
       -3.48918028e-02, -9.23598185e-02,  4.43890952e-02, -3.50469612e-02,
        2.51943655e-02,  5.56180661e-04,  1.84777137e-02, -5.96401049e-03,
        2.86203418e-02,  2.10898416e-03, -1.02372852e-03, -6.90437183e-02,
        6.69688592e-03,  1.94495562e-02, -5.12257256e-02,  5.57008088e-02,
        5.78436442e-02, -3.29894498e-02, -6.74537476e-03, -1.77969225e-02,
       -6.06913492e-02, -1.87983904e-02,  2.92137661e-03,  2.18674261e-02,
        8.53015706e-02,  1.60926543e-02, -5.59101515e-02, -1.17584780e-01,
       -5.85826449e-02, -1.67378802e-02,  2.92058829e-02,  2.96703260e-02,
        7.82572776e-02,  8.91009718e-02,  5.30007370e-02,  1.97945647e-02,
        6.81097759e-03, -6.12755977e-02,  1.53368413e-01, -3.62148061e-02,
       -7.13073984e-02, -9.59469751e-02, -5.66785075e-02,  1.29215661e-02,
        6.41610548e-02,  1.31830111e-01,  3.21348757e-02, -1.53440889e-02,
       -3.77770625e-02, -2.54489039e-03,  2.56117135e-02,  8.30824152e-02,
       -4.36801873e-02,  3.34344991e-02,  4.04898338e-02,  5.09745888e-02,
        6.32475019e-02, -5.44953123e-02,  1.70885976e-02,  9.76271778e-02,
        7.13663548e-02,  5.22759371e-02, -4.61318120e-02,  3.26620322e-03,
       -1.28171176e-01, -8.20384771e-02,  8.81024264e-03, -1.11699551e-01,
       -3.02564713e-05, -5.61439544e-02, -3.00320294e-02,  3.12745199e-03,
        1.12642888e-02,  4.61776890e-02, -3.65626812e-02, -7.01036528e-02,
       -1.54155062e-03, -2.67111440e-03,  2.79181432e-02, -3.68702449e-02,
        6.77622929e-02,  8.42672307e-03, -1.06100030e-02, -4.98120021e-03,
        5.66277802e-02,  7.70770275e-05,  4.46439721e-02, -1.37687398e-33,
        3.87266884e-03, -7.73895830e-02, -3.91252749e-02,  9.16544721e-02,
       -9.48395394e-03,  5.94150461e-02, -2.19157748e-02,  7.03450739e-02,
       -8.99320021e-02,  3.00047733e-03, -1.33976499e-02, -2.77075060e-02,
        5.07879071e-04, -4.06749621e-02,  1.20992117e-01,  7.38079920e-02,
       -4.15586270e-02,  8.47842748e-05, -3.19285169e-02, -3.11212726e-02,
       -3.53663228e-02, -3.85615900e-02, -3.69661860e-03, -1.74951293e-02,
       -1.01386443e-01, -6.74438011e-03, -3.22213992e-02, -2.34014262e-02,
       -7.51255006e-02,  9.52915847e-03, -3.56099494e-02,  4.39785942e-02,
       -7.70172700e-02,  7.52708912e-02,  2.97333077e-02,  1.03682563e-01,
        2.25987844e-02, -3.57798347e-03, -5.06614000e-02, -6.17934810e-03,
       -3.63804288e-02, -4.93802764e-02,  6.43685237e-02,  1.66756939e-02,
        5.47531955e-02, -6.30724430e-02, -7.14906538e-03,  3.53099070e-02,
        1.14628986e-01,  1.48889637e-02, -1.20216599e-02,  3.14838327e-02,
        6.11677095e-02, -6.73992336e-02, -2.38756239e-02,  6.66562468e-02,
       -1.41794980e-02,  7.77084455e-02,  3.38802151e-02,  4.67109829e-02,
       -4.14587446e-02,  1.06381655e-01,  1.77050382e-02,  8.16331282e-02,
       -5.32010384e-02,  3.09349690e-03, -4.63885069e-02, -1.11024439e-01,
        9.84876081e-02,  3.16528529e-02,  3.54868136e-02, -4.61716205e-02,
        2.37291586e-02,  4.23720814e-02, -4.16917130e-02, -3.25479880e-02,
       -5.65674081e-02, -2.73519885e-02, -5.61530553e-02, -5.45957610e-02,
        5.47639765e-02, -4.26548943e-02, -1.77222881e-02, -4.17537056e-02,
        9.22749788e-02, -4.48756339e-03, -3.16205844e-02, -7.19618574e-02,
        3.03516891e-02, -3.60147171e-02,  2.55061910e-02, -1.20160570e-02,
       -6.77872002e-02, -8.39396864e-02,  7.40060434e-02,  1.08392362e-33,
       -5.78778945e-02,  2.35935841e-02, -3.73855792e-02,  9.17482674e-02,
        8.57648149e-04, -1.00804940e-01,  2.90666129e-02, -6.92565069e-02,
       -3.03879082e-02,  4.95665707e-02,  9.83998403e-02,  5.48501126e-03,
        2.58593988e-02, -7.08720982e-02,  2.44212075e-04,  1.17892012e-01,
       -3.02263182e-02, -3.34018171e-02, -4.41410951e-03, -4.36442643e-02,
        2.10561068e-03,  2.58707497e-02, -2.28373776e-03,  4.01816797e-03,
       -9.46329460e-02, -3.57761122e-02,  4.82394407e-03,  6.81471601e-02,
        6.77941889e-02, -5.89522608e-02,  3.80148105e-02,  4.51699682e-02,
        2.11506095e-02,  2.85622943e-02,  5.02398685e-02, -3.47013772e-02,
        1.27541617e-01, -1.21680098e-02,  4.89155799e-02,  4.30129766e-02,
       -1.05632208e-02,  4.42190170e-02,  4.23729606e-02,  6.65718615e-02,
        5.23332208e-02,  4.08802107e-02,  8.60492047e-03, -5.37925065e-02,
        1.45949135e-02,  4.02982086e-02, -5.52256145e-02, -4.24648635e-02,
       -3.49945799e-02, -1.04911614e-03,  5.85939772e-02,  5.99254631e-02,
       -1.00737087e-01, -4.28691087e-03, -2.16799858e-03,  4.83212061e-02,
        1.52622443e-02,  7.82466829e-02,  5.05089089e-02,  1.23012193e-01,
        2.03334969e-02, -4.10696641e-02, -3.99107896e-02,  1.87731367e-02,
       -8.12048966e-04,  3.41142379e-02,  6.77276636e-03,  3.33843902e-02,
       -2.36794762e-02, -7.20309764e-02, -3.03072506e-03, -2.25711446e-02,
        8.34420137e-03,  8.10134113e-02,  9.36350748e-02, -6.29347041e-02,
        1.88073441e-02, -7.15238741e-03, -8.29940289e-03, -3.10491007e-02,
       -2.35473365e-02, -1.33110145e-02, -8.09279736e-03,  1.04321994e-01,
       -2.05932185e-02, -7.64189288e-03,  2.25909296e-02,  9.72870272e-03,
       -1.23837870e-02, -9.06432718e-02, -2.32012570e-02, -1.33720999e-08,
       -1.05468839e-01, -9.42852497e-02, -1.76342018e-02, -2.64573060e-02,
        4.91606407e-02,  3.70754302e-02, -1.58867575e-02, -6.01250418e-02,
       -1.34571437e-02, -4.73404564e-02,  1.54961285e-03,  2.35986547e-03,
       -6.51838165e-03,  4.39409502e-02,  2.69966889e-02, -3.03318854e-02,
       -4.83082198e-02,  7.47302361e-03, -3.73482220e-02,  4.77125729e-03,
        1.23311123e-02, -4.49068379e-03,  3.00540347e-02,  4.59260754e-02,
        1.58794709e-02,  3.23777497e-02,  7.78075680e-03,  1.46623049e-02,
        5.40291667e-02,  2.84927916e-02,  5.28836437e-02,  3.19968201e-02,
        3.48250791e-02, -6.29379898e-02,  2.60197911e-02,  5.28662615e-02,
        1.86012071e-02,  2.56272238e-02,  3.34852561e-02, -7.47839361e-03,
       -5.55528179e-02, -1.04302384e-01, -1.19742323e-02, -2.98883263e-02,
        1.91899296e-02, -6.35922328e-02, -1.07939012e-01, -6.67868406e-02,
       -1.89650729e-02, -1.17938183e-01, -5.18258177e-02, -3.08049750e-02,
       -1.61484350e-02,  2.20019557e-02, -2.41571926e-02, -3.88199948e-02,
        4.79725227e-02, -1.77330077e-02, -9.07713026e-02,  1.93804894e-02,
        6.91351071e-02,  6.40435964e-02,  3.52142081e-02,  8.02700466e-04]
    emb_test=get_embedding("Testelement")
    assert cosine_similarity (emb_test,test_element_constant) >= 1.0
    emb_test=get_embedding("TestÃ¤lement")
    cs=cosine_similarity (emb_test,test_element_constant)
    assert cs > 0.49 and cs <0.6
    emb_test=get_embedding("ding")
    assert cosine_similarity (emb_test,test_element_constant) < 0.2
    emb_test=get_embedding("tnrmeletseT")
    cs=cosine_similarity (emb_test,test_element_constant)
    assert cs > 0.2 and cs < 0.5
